 /**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";  UNICODE_INPUT = true;  static = false;}PARSER_BEGIN(XPathTokenParser)package imc.disxmldb.xpath.xpathtoken;public class XPathTokenParser{  public static void main(String args []) throws ParseException  {    XPathTokenParser parser = new XPathTokenParser(System.in);    while (true)    {      System.out.println("Reading from standard input...");      System.out.print("Enter an expression like \"1+(2+3)*4;\" :");      try      {        Token token = null;        while ((token = parser.getNextToken()) != null)        {          System.out.println(token.image);        }      }      catch (Exception e)      {        System.out.println("NOK.");        System.out.println(e.getMessage());        break;      }      catch (Error e)      {        System.out.println("Oops.");        System.out.println(e.getMessage());        break;      }    }  }}PARSER_END(XPathTokenParser)SKIP :{  " "| "\r"| "\t"| "\n"}TOKEN : /* OPERATORS */{  < PLUS : "+" >| < MINUS : "-" >| < MULTIPLY : "*" >| < DIVIDE : "/" >| < EQ : "=" >| < LT : "<" >| < LE : "<=" >| < GT : ">" >| < GE : ">=" >
| < UNDERSCODE : "_" >}TOKEN : /*defination of digits*/{
  < IntegerLiteral : (<PLUS> | <MINUS>)? < DIGITS > >| < #DIGITS : (< DIGIT >)+ >| < #DIGIT : [ "0"-"9" ] >| < EscapeApos : "''" >| < EscapeQuot : "\"\"" >| < DecimalLiteral :   (<PLUS> | <MINUS>)?( ("." < DIGITS >)  |    (      < DIGITS > "." (< DIGIT >)*    )) >| < DoubleLiteral :    (      ("." < DIGITS >)    |      (        < DIGITS >        (          "." (< DIGIT >)*        )?      )    )    [ "e", "E" ]    (      < PLUS >    | < MINUS >    )?    < DIGITS > >}TOKEN :{  < SingleQuotation : "'" >| < DoubleQuotation : "\"" >| < StringLiteral :    (      < DoubleQuotation >      (        ~[ "\"" ]      | < EscapeQuot >      )*      < DoubleQuotation >    )  |    (      < SingleQuotation >      (        (~[ "'" ])      | (< EscapeApos >)      )*      < SingleQuotation >    ) >}TOKEN :{  < DOT : "." >
| < DOUBLESLASH : ("//" | ".//") >
| < CURSLASH : "./" >| < DECENDENTSLASH : "../" >| < OPENPARAN : "(" >| < CLOSEPARAN : ")" >| < COMMA : "," >| < OPENBRAKET : "[" >| < CLOSEBRAKET : "]" >}TOKEN :{  < AT : "@" >| < NCName :    (      (< Alpha > | < UNDERSCODE >)      (        < Alpha >      | < DIGIT > 
      | < UNDERSCODE >      )*    ) >| < QName : (< NCName > ":" < NCName >) >| < AttrName : (< AT > < NCName >) >
| < FuncNameStart : ((< NCName ><OPENPARAN >)) >
| < #Alpha : [ "a"-"z", "A"-"Z","\u5000"-"\u5FFF","\u6000"-"\u6FFF", "\u7000"-"\u7FFF", "\u8000"-"\u8FFF","\u9000"-"\u9FFF"  ] >}

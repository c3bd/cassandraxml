/* Generated By:JavaCC: Do not edit this line. XPathCompiler.java */
package imc.disxmldb.xpath.xpathcompile;
import org.apache.cassandra.dht.IPartitioner;
import org.apache.cassandra.utils.LatencyTracker;

import imc.disxmldb.CollectionStore;
import imc.disxmldb.cassandra.verbhandler.XPathQueryCommand;
import imc.disxmldb.dom.typesystem.ValueType;
import imc.disxmldb.dom.typesystem.TypeResolver;
import imc.disxmldb.index.filter.IXMLFilter;
import imc.disxmldb.index.filter.XMLLocalDocFilter;
import imc.disxmldb.xpath.ExecContext;
import imc.disxmldb.xpath.XPathProcessorV2;
import imc.disxmldb.xpath.XPathProcessorV2.XPathError;
import imc.disxmldb.xpath.XPathSequence;
import imc.disxmldb.xpath.function.FunctionDef;
import imc.disxmldb.xpath.function.FunctionPool;

public class XPathCompiler implements XPathCompilerConstants {
  public static void main(String args []) throws ParseException
  {
    XPathCompiler parser = new XPathCompiler(System.in);
  }

  public boolean compile() throws ParseException {
                        XPath();
                        //否者抛出异常
                        return true;
        }

/**
all the ExecContext object for the function should be created by the function that invokes them
*/
  final public void XPath() throws ParseException {
    if (jj_2_1(2)) {
      function();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIVIDE:
      case DOUBLESLASH:
      case NCName:
      case QName:
      case AttrName:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DIVIDE:
        case DOUBLESLASH:
          XPathStepLevel();
          break;
        default:
          jj_la1[0] = jj_gen;
          ;
        }
        OutXPathEndWithFunc();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(SEMICOLON);
  }

/**
this context_ is not the parent context
*/
  final public void BoolXPathStep() throws ParseException {
String compOp = null;
ValueType argType = ValueType.UNKNOW;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEADDOUBLESLASH:
    case CURSLASH:
      LeadXPathStepLevel();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    if (jj_2_2(2)) {
      function();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NCName:
      case QName:
      case AttrName:
        XPathStep();
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DIVIDE:
          case DOUBLESLASH:
            ;
            break;
          default:
            jj_la1[3] = jj_gen;
            break label_1;
          }
          XPathStepLevel();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NCName:
          case QName:
          case AttrName:
            XPathStep();
            break;
          case FuncStart:
            function();
            break;
          default:
            jj_la1[4] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQ:
        case LT:
        case LE:
        case GT:
        case GE:
          compOp = compareOperator();
          argType = Constant();
                          FunctionDef funcDef = new FunctionDef(compOp);
                          funcDef.addArgType(ValueType.ELEMENTS);
                          funcDef.addArgType(argType);
                          FunctionDef newDef = FunctionPool.getFuncImpl(funcDef);
                          if (newDef == null || newDef.getFuncImpl() == null) {
                                {if (true) throw new ParseException("no function is found for " + funcDef.signature());}
                          }
          break;
        default:
          jj_la1[5] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/**
	this function will execute the steps
*/
  final public void XPathSteps() throws ParseException {
    XPathStep();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIVIDE:
      case DOUBLESLASH:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_2;
      }
      XPathStepLevel();
      XPathStep();
    }
  }

  final public void OutXPathEndWithFunc() throws ParseException {
    XPathStep();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIVIDE:
      case DOUBLESLASH:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_3;
      }
      XPathStepLevel();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FuncStart:
        function();
        break;
      case NCName:
      case QName:
      case AttrName:
        XPathStep();
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void XPathStepLevel() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOUBLESLASH:
      jj_consume_token(DOUBLESLASH);
      break;
    case DIVIDE:
      jj_consume_token(DIVIDE);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void LeadXPathStepLevel() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEADDOUBLESLASH:
      jj_consume_token(LEADDOUBLESLASH);
      break;
    case CURSLASH:
      jj_consume_token(CURSLASH);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void XPathStep() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NCName:
      jj_consume_token(NCName);
      break;
    case QName:
      jj_consume_token(QName);
      break;
    case AttrName:
      jj_consume_token(AttrName);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }

    Predicates();
  }

/**
	invoke the function, but will not merge with the parent context
*/
  final public void function() throws ParseException {
        Token funcName = null;
        FunctionDef funcDef = null;
    funcName = jj_consume_token(FuncStart);
            funcDef = new FunctionDef(funcName.image.substring(0, funcName.image.length() - 1));
    paramters(funcDef);
    jj_consume_token(CLOSEPARAN);
                //invoke the function here
                FunctionDef newDef = FunctionPool.getFuncImpl(funcDef);
                if (newDef == null || newDef.getFuncImpl() == null) {
                        {if (true) throw new ParseException(funcDef.signature()
                                                + " " + XPathError.NOT_IMPLEMENTED);}
                }
  }

  final public void paramters(FunctionDef func_) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IntegerLiteral:
    case DecimalLiteral:
    case DoubleLiteral:
    case StringLiteral:
    case LEADDOUBLESLASH:
    case CURSLASH:
    case NCName:
    case QName:
    case AttrName:
      parameter(func_);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMMA);
        parameter(func_);
      }
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
  }

  final public void parameter(FunctionDef func_) throws ParseException {
        ValueType argType = ValueType.UNKNOW;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEADDOUBLESLASH:
    case CURSLASH:
    case NCName:
    case QName:
    case AttrName:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEADDOUBLESLASH:
      case CURSLASH:
        LeadXPathStepLevel();
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      XPathStep();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DIVIDE:
        case DOUBLESLASH:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_5;
        }
        XPathStepLevel();
        XPathStep();
      }
                argType = ValueType.ELEMENTS;
      break;
    case IntegerLiteral:
    case DecimalLiteral:
    case DoubleLiteral:
    case StringLiteral:
      argType = Constant();
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        func_.addArgType(argType);
  }

/**

*/
  final public void Predicates() throws ParseException {
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPENBRAKET:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_6;
      }
      Predicate();
    }
  }

  final public void Predicate() throws ParseException {
    jj_consume_token(OPENBRAKET);
    BoolXPathStep();
    jj_consume_token(CLOSEBRAKET);
  }

  final public String compareOperator() throws ParseException {
        Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      t = jj_consume_token(EQ);
      break;
    case LT:
      t = jj_consume_token(LT);
      break;
    case LE:
      t = jj_consume_token(LE);
      break;
    case GT:
      t = jj_consume_token(GT);
      break;
    case GE:
      t = jj_consume_token(GE);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

/**
parent node should create the context_ for this node
*/
  final public ValueType Constant() throws ParseException {
  ValueType ret = ValueType.UNKNOW;
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case StringLiteral:
      t = jj_consume_token(StringLiteral);
         String value = t.image.trim();
        ret = TypeResolver.resolve(value.substring(1, value.length() - 1));
        if (ValueType.isFileSizeType(ret))
                ret = ValueType.FILESIZE;
      break;
    case IntegerLiteral:
      t = jj_consume_token(IntegerLiteral);
        Integer.parseInt(t.image);
        ret = ValueType.INT;
      break;
    case DecimalLiteral:
      t = jj_consume_token(DecimalLiteral);
          if (Double.parseDouble(t.image) == Double.POSITIVE_INFINITY || Double.parseDouble(t.image) == Double.NEGATIVE_INFINITY)
                {if (true) throw new ParseException(t.image + " is too big");}
          ret = ValueType.DOUBLE;
      break;
    case DoubleLiteral:
      t = jj_consume_token(DoubleLiteral);
   if (Double.parseDouble(t.image) == Double.POSITIVE_INFINITY || Double.parseDouble(t.image) == Double.NEGATIVE_INFINITY)
        {if (true) throw new ParseException(t.image + " is too big");}
        ret = ValueType.DOUBLE;
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(DoubleLiteral)) return true;
    return false;
  }

  private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_13()) jj_scanpos = xsp;
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) return true;
    }
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(DecimalLiteral)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(IntegerLiteral)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3R_7() {
    if (jj_scan_token(FuncStart)) return true;
    if (jj_3R_8()) return true;
    if (jj_scan_token(CLOSEPARAN)) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) return true;
    }
    return false;
  }

  private boolean jj_3R_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_9()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(StringLiteral)) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_3R_15()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public XPathCompilerTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[21];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x4000100,0x4000100,0x18000000,0x4000100,0x0,0x3e00,0x0,0x4000100,0x4000100,0x0,0x4000100,0x18000000,0x0,0x0,0x19308000,0x18000000,0x4000100,0x19308000,0x0,0x3e00,0x1308000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0xe0,0x0,0x0,0x1e0,0x0,0xe0,0x0,0x0,0x1e0,0x0,0x0,0xe0,0x1,0xe0,0x0,0x0,0xe0,0x2,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public XPathCompiler(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public XPathCompiler(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new XPathCompilerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public XPathCompiler(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new XPathCompilerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public XPathCompiler(XPathCompilerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(XPathCompilerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[42];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 21; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 42; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

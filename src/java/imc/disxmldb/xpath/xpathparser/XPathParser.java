/* Generated By:JavaCC: Do not edit this line. XPathParser.java */
package imc.disxmldb.xpath.xpathparser;
import org.apache.cassandra.dht.IPartitioner;
import org.apache.cassandra.utils.LatencyTracker;

import imc.disxmldb.CollectionStore;
import imc.disxmldb.cassandra.verbhandler.XPathQueryCommand;
import imc.disxmldb.dom.typesystem.ValueType;
import imc.disxmldb.dom.typesystem.TypeResolver;
import imc.disxmldb.index.filter.IXMLFilter;
import imc.disxmldb.index.filter.XMLLocalDocFilter;
import imc.disxmldb.xpath.ExecContext;
import imc.disxmldb.xpath.XPathProcessorV2;
import imc.disxmldb.xpath.XPathProcessorV2.XPathError;
import imc.disxmldb.xpath.XPathSequence;
import imc.disxmldb.xpath.function.FunctionDef;
import imc.disxmldb.xpath.function.FunctionPool;
import imc.disxmldb.config.SysConfig;

import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;

public class XPathParser implements XPathParserConstants {
  private static LatencyTracker xpathExecLatency = new LatencyTracker();
  private PipedInputStream input = new PipedInputStream(9160);
  private PipedOutputStream output = new PipedOutputStream();
  private boolean connected = false;

public boolean connect()
{
                try {
                                output.connect(input);
                                ReInit(input, SysConfig.ENCODING);
                                connected = true;
                                return true;
                        } catch (IOException e) {
                                return false;
                        }
}

public void close() throws IOException
{
        input.close();
        output.close();
}

public boolean reConnect()
{
        try {
                                input.close();
                                output.close();
                                input = new PipedInputStream(9160);
                                output = new PipedOutputStream();
                                output.connect(input);
                                this.ReInit(input, SysConfig.ENCODING);
                                connected = true;
                                return true;
                        } catch (IOException e) {
                                return false;
                        }
}
  public Object execXPath(XPathQueryCommand command,
                        CollectionStore colStore) throws IMCXPathException,ParseException,IOException {
                          if (!connected)
                          {
                                throw new IMCXPathException("XPathParser is not initialized properly");
                          }
                          output.write(command.command);
                long startTime = System.currentTimeMillis();
                try {
                        IPartitioner partitioner = colStore.getCfStore().getCfStore().partitioner;
                        IXMLFilter filter = new XMLLocalDocFilter(
                                        colStore.getColKeyValidator(), partitioner, command.range);
                        ExecContext context = new ExecContext();
                        context.colStore = colStore;
                        context.filter = filter;
                        context.recursive = command.isRecursive();
                        context.isRoot = true;
                        XPath(context);
                        if (context.hasError())
                                 throw new IMCXPathException(context.getError());

                        if (context.noResults())
                  return null;
                        Object ret = context.getResult();
                        if (ret instanceof XPathSequence)
                                return ((XPathSequence) ret).getStepValue();
                        else
                                return ret;
                } finally {
                        xpathExecLatency.addMicro(System.currentTimeMillis() - startTime);
                }
        }

  public static void main(String args []) throws ParseException
  {
    XPathParser parser = new XPathParser(System.in);
  }

/**
all the ExecContext object for the function should be created by the function that invokes them
*/
  final public void XPath(ExecContext root_) throws ParseException {
  int level = XPathSequence.ASCIENT_DESCIENT_LEVEL;
   ExecContext func = root_.createChildContext();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FuncStart:
      function(func);
        XPathProcessorV2.mergeFunction(root_, func);
      jj_consume_token(SEMICOLON);
      break;
    case DIVIDE:
    case DOUBLESLASH:
    case NCName:
    case QName:
    case AttrName:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIVIDE:
      case DOUBLESLASH:
        level = XPathStepLevel();
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      OutXPathEndWithFunc(level, root_);
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/**
this context_ is not the parent context
*/
  final public ExecContext BoolXPathStep(ExecContext context_) throws ParseException {
  ExecContext funcChildContext = null;
  String compOp = "";
  ValueType argType = ValueType.UNKNOW;
  ExecContext argContext = context_.createChildContext();
  int level = XPathSequence.ASCIENT_DESCIENT_LEVEL;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEADDOUBLESLASH:
    case CURSLASH:
      level = LeadXPathStepLevel();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    if (jj_2_1(2)) {
                          funcChildContext = context_.createChildContext();
      function(funcChildContext);
                        XPathProcessorV2.mergeFunction(context_, funcChildContext);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NCName:
      case QName:
      case AttrName:
        XPathStep(level, context_);
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DIVIDE:
          case DOUBLESLASH:
            ;
            break;
          default:
            jj_la1[3] = jj_gen;
            break label_1;
          }
          level = XPathStepLevel();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NCName:
          case QName:
          case AttrName:
            XPathStep(level, context_);
            break;
          case FuncStart:
                                   funcChildContext = context_.createChildContext();
            function(funcChildContext);
                                XPathProcessorV2.mergeFunction(context_, funcChildContext);
            break;
          default:
            jj_la1[4] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQ:
        case LT:
        case LE:
        case GT:
        case GE:
          compOp = compareOperator();
          argType = Constant(argContext);
                          if (context_.noResults())
                                {if (true) return context_;}
                          funcChildContext = context_.createChildContext();
                          funcChildContext.funcDef = new FunctionDef(compOp);
                          funcChildContext.funcDef.addArgType(ValueType.ELEMENTS);
                          funcChildContext.funcDef.addArgType(argType);
                          funcChildContext.args.push(context_);
                          funcChildContext.args.push(argContext);
                          FunctionDef funcDef = FunctionPool.getFuncImpl(funcChildContext.getFuncDef());
                          if (funcDef == null || funcDef.getFuncImpl() == null) {
                                {if (true) throw new ParseException("no function is found for " + funcChildContext.getFuncDef().signature());}
                          } else {
                                funcDef.getFuncImpl().invoke(funcChildContext);
                                XPathProcessorV2.mergeFunction(context_, funcChildContext);
                          }
          break;
        default:
          jj_la1[5] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  {if (true) return context_;}
    throw new Error("Missing return statement in function");
  }

/**
	this function will execute the steps
*/
  final public void XPathSteps(int level, ExecContext context_) throws ParseException {
    XPathStep(level, context_);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIVIDE:
      case DOUBLESLASH:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_2;
      }
      level = XPathStepLevel();
      XPathStep(level, context_);
    }
        XPathProcessorV2.execSteps(context_);
  }

  final public void OutXPathEndWithFunc(int level, ExecContext context_) throws ParseException {
 ExecContext func = null;
 boolean shouldBreak = false;
    XPathStep(level, context_);
          func = context_.createChildContext();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIVIDE:
      case DOUBLESLASH:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_3;
      }
      level = XPathStepLevel();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FuncStart:
        function(func);
                        XPathProcessorV2.mergeFunction(context_, func);
                        shouldBreak = true;
        break;
      case NCName:
      case QName:
      case AttrName:
        XPathStep(level, context_);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                if (!shouldBreak)
                        XPathProcessorV2.execSteps(context_);
  }

  final public int XPathStepLevel() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOUBLESLASH:
      jj_consume_token(DOUBLESLASH);
       {if (true) return XPathSequence.ASCIENT_DESCIENT_LEVEL;}
      break;
    case DIVIDE:
      jj_consume_token(DIVIDE);
       {if (true) return 1;}
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public int LeadXPathStepLevel() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEADDOUBLESLASH:
      jj_consume_token(LEADDOUBLESLASH);
       {if (true) return XPathSequence.ASCIENT_DESCIENT_LEVEL;}
      break;
    case CURSLASH:
      jj_consume_token(CURSLASH);
       {if (true) return 1;}
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void XPathStep(int level, ExecContext context_) throws ParseException {
Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NCName:
      t = jj_consume_token(NCName);
      break;
    case QName:
      t = jj_consume_token(QName);
      break;
    case AttrName:
      t = jj_consume_token(AttrName);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   if (level == 0)
   {
        level = 1;
        context_.setIsRoot(true);
   }
   context_.setLastLevel(level);
   context_.addSequence(t.image, t.kind);
    Predicates(context_);
  }

/**
	invoke the function, but will not merge with the parent context
*/
  final public void function(ExecContext func_) throws ParseException {
        Token funcName = null;
    funcName = jj_consume_token(FuncStart);
            func_.setFuncDef(new FunctionDef(funcName.image.substring(0, funcName.image.length() - 1)));
    paramters(func_);
    jj_consume_token(CLOSEPARAN);
                //invoke the function here
                FunctionDef funcDef = FunctionPool.getFuncImpl(func_.getFuncDef());
                if (funcDef == null) {
                        {if (true) throw new ParseException(func_.funcDef.signature()
                                                + " " + XPathError.NOT_IMPLEMENTED);}
                } else {
                        func_.setFuncDef(funcDef);
                        funcDef.getFuncImpl().invoke(func_);
                }
  }

  final public void paramters(ExecContext func_) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IntegerLiteral:
    case DecimalLiteral:
    case DoubleLiteral:
    case StringLiteral:
    case LEADDOUBLESLASH:
    case CURSLASH:
    case NCName:
    case QName:
    case AttrName:
      parameter(func_);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMMA);
        parameter(func_);
      }
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
  }

  final public void parameter(ExecContext func_) throws ParseException {
        ExecContext argContext = func_.createChildContext();
        ValueType argType = ValueType.UNKNOW;
        int level = XPathSequence.ASCIENT_DESCIENT_LEVEL;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEADDOUBLESLASH:
    case CURSLASH:
    case NCName:
    case QName:
    case AttrName:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEADDOUBLESLASH:
      case CURSLASH:
        level = LeadXPathStepLevel();
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      XPathStep(level, argContext);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DIVIDE:
        case DOUBLESLASH:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_5;
        }
        level = XPathStepLevel();
        XPathStep(level, argContext);
      }
                argType = ValueType.ELEMENTS;
      break;
    case IntegerLiteral:
    case DecimalLiteral:
    case DoubleLiteral:
    case StringLiteral:
      argType = Constant(argContext);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        func_.args.add(argContext);
        func_.funcDef.addArgType(argType);
  }

/**

*/
  final public void Predicates(ExecContext steps_) throws ParseException {
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPENBRAKET:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_6;
      }
      Predicate(steps_);
    }
  }

  final public void Predicate(ExecContext steps_) throws ParseException {
        ExecContext predicate = steps_.createChildContext();
    jj_consume_token(OPENBRAKET);
    BoolXPathStep(predicate);
          if (!steps_.noResults())
          {
                XPathProcessorV2.execSteps(predicate);
                XPathProcessorV2.mergePredicate(steps_, predicate);
          }
    jj_consume_token(CLOSEBRAKET);
  }

  final public String compareOperator() throws ParseException {
        Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      t = jj_consume_token(EQ);
      break;
    case LT:
      t = jj_consume_token(LT);
      break;
    case LE:
      t = jj_consume_token(LE);
      break;
    case GT:
      t = jj_consume_token(GT);
      break;
    case GE:
      t = jj_consume_token(GE);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

/**
parent node should create the context_ for this node
*/
  final public ValueType Constant(ExecContext context_) throws ParseException {
  ValueType ret = ValueType.UNKNOW;
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case StringLiteral:
      t = jj_consume_token(StringLiteral);
         String value = t.image.trim();
        ret = TypeResolver.resolve(value.substring(1, value.length() - 1));
        if (ValueType.isFileSizeType(ret))
                ret = ValueType.FILESIZE;
      break;
    case IntegerLiteral:
      t = jj_consume_token(IntegerLiteral);
  try
  {
        Integer.parseInt(t.image);
        ret = ValueType.INT;
  } catch(Exception ex)
  {
        ret = ValueType.LONG;
  }
      break;
    case DecimalLiteral:
      t = jj_consume_token(DecimalLiteral);
          ret = ValueType.DOUBLE;
      break;
    case DoubleLiteral:
      t = jj_consume_token(DoubleLiteral);
        ret = ValueType.DOUBLE;
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        context_.addSequence(t.image, t.kind);
        {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_3_1() {
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(IntegerLiteral)) return true;
    return false;
  }

  private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_13()) jj_scanpos = xsp;
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) return true;
    }
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(CURSLASH)) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(StringLiteral)) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(LEADDOUBLESLASH)) return true;
    return false;
  }

  private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) return true;
    }
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(DoubleLiteral)) return true;
    return false;
  }

  private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(DecimalLiteral)) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_7() {
    if (jj_scan_token(FuncStart)) return true;
    if (jj_3R_8()) return true;
    if (jj_scan_token(CLOSEPARAN)) return true;
    return false;
  }

  private boolean jj_3R_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_9()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_3R_15()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public XPathParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[21];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x4000100,0x4000100,0x18000000,0x4000100,0x0,0x3e00,0x0,0x4000100,0x4000100,0x0,0x4000100,0x18000000,0x0,0x0,0x19308000,0x18000000,0x4000100,0x19308000,0x0,0x3e00,0x1308000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x1e0,0x0,0x0,0x1e0,0x0,0xe0,0x0,0x0,0x1e0,0x0,0x0,0xe0,0x1,0xe0,0x0,0x0,0xe0,0x2,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public XPathParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public XPathParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new XPathParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public XPathParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new XPathParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public XPathParser(XPathParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(XPathParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[42];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 21; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 42; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
